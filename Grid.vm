function Grid.new 0
push constant 5
call Memory.alloc 1
pop pointer 0
push argument 0
pop this 0
push constant 512
push this 0
call Math.divide 2
pop this 1
push constant 256
push this 0
call Math.divide 2
pop this 2
push this 1
push this 2
call Math.multiply 2
pop this 3
push this 3
call Array.new 1
pop this 4
push pointer 0
return
function Grid.cells 0
push argument 0
pop pointer 0
push this 4
return
function Grid.cell 0
push argument 0
pop pointer 0
push argument 1
push this 4
add
pop pointer 1
push that 0
return
function Grid.area 0
push argument 0
pop pointer 0
push this 3
return
function Grid.cellSize 0
push argument 0
pop pointer 0
push this 0
return
function Grid.getPos 0
push argument 0
pop pointer 0
push this 1
push argument 2
call Math.multiply 2
push argument 1
add
return
function Grid.getXY 3
push argument 0
pop pointer 0
push constant 2
call Array.new 1
pop local 0
push argument 1
push this 1
call MyMath.mod 2
pop local 1
push argument 1
push this 1
call Math.divide 2
pop local 2
push constant 0
push local 0
add
push local 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 1
push local 0
add
push local 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
return
function Grid.center 0
push argument 0
pop pointer 0
push pointer 0
push this 1
push constant 2
call Math.divide 2
push this 2
push constant 2
call Math.divide 2
call Grid.getPos 3
return
function Grid.centerXY 0
push argument 0
pop pointer 0
push pointer 0
push pointer 0
call Grid.center 1
call Grid.getXY 2
return
function Grid.set 1
push argument 0
pop pointer 0
push pointer 0
push argument 1
push argument 2
call Grid.getPos 3
pop local 0
push local 0
push this 4
add
push constant 0
not
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
function Grid.setPos 0
push argument 0
pop pointer 0
push argument 1
push this 4
add
push constant 0
not
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
function Grid.setAll 2
push argument 0
pop pointer 0
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push this 3
lt
not
if-goto WHILE_END0
push pointer 0
push local 0
call Grid.getXY 2
pop local 1
push pointer 0
push constant 0
push local 1
add
pop pointer 1
push that 0
push constant 1
push local 1
add
pop pointer 1
push that 0
call Grid.set 3
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push local 1
call Array.dispose 1
pop temp 0
push constant 0
return
function Grid.unSet 1
push argument 0
pop pointer 0
push pointer 0
push argument 1
push argument 2
call Grid.getPos 3
pop local 0
push local 0
push this 4
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
function Grid.unSetPos 0
push argument 0
pop pointer 0
push argument 1
push this 4
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
function Grid.unSetAll 2
push argument 0
pop pointer 0
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push this 3
lt
not
if-goto WHILE_END0
push pointer 0
push local 0
call Grid.getXY 2
pop local 1
push pointer 0
push constant 0
push local 1
add
pop pointer 1
push that 0
push constant 1
push local 1
add
pop pointer 1
push that 0
call Grid.unSet 3
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Grid.drawGrid 2
push argument 0
pop pointer 0
label WHILE_EXP0
push local 0
push this 3
lt
not
if-goto WHILE_END0
push pointer 0
push local 0
call Grid.drawPos 2
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Grid.drawXY 1
push argument 0
pop pointer 0
push pointer 0
push argument 1
push argument 2
call Grid.getPos 3
pop local 0
push pointer 0
push local 0
call Grid.drawPos 2
pop temp 0
push constant 0
return
function Grid.drawPos 3
push argument 0
pop pointer 0
push argument 1
push this 3
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
return
label IF_FALSE0
push pointer 0
push argument 1
call Grid.getXY 2
pop local 2
push constant 0
push local 2
add
pop pointer 1
push that 0
pop local 0
push constant 1
push local 2
add
pop pointer 1
push that 0
pop local 1
push local 2
call Array.dispose 1
pop temp 0
push argument 1
push this 4
add
pop pointer 1
push that 0
call Screen.setColor 1
pop temp 0
push local 0
push this 0
call Math.multiply 2
push local 1
push this 0
call Math.multiply 2
push local 0
push constant 1
add
push this 0
call Math.multiply 2
push constant 1
sub
push local 1
push constant 1
add
push this 0
call Math.multiply 2
push constant 1
sub
call Screen.drawRectangle 4
pop temp 0
push constant 0
return
function Grid.drawCell 1
push argument 0
pop pointer 0
push pointer 0
push argument 1
push argument 2
call Grid.getPos 3
pop local 0
push local 0
push constant 512
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
return
label IF_FALSE0
push local 0
push this 4
add
pop pointer 1
push that 0
call Screen.setColor 1
pop temp 0
push argument 1
push this 0
call Math.multiply 2
push argument 2
push this 0
call Math.multiply 2
push argument 1
push constant 1
add
push this 0
call Math.multiply 2
push constant 1
sub
push argument 2
push constant 1
add
push this 0
call Math.multiply 2
push constant 1
sub
call Screen.drawRectangle 4
pop temp 0
push constant 0
return
function Grid.left 0
push argument 0
pop pointer 0
push argument 1
push this 1
call Math.divide 2
push this 1
call Math.multiply 2
push this 1
push argument 1
push constant 1
sub
add
push this 1
call MyMath.mod 2
add
return
function Grid.right 0
push argument 0
pop pointer 0
push argument 1
push this 1
call Math.divide 2
push this 1
call Math.multiply 2
push this 1
push argument 1
push constant 1
add
add
push this 1
call MyMath.mod 2
add
return
function Grid.up 0
push argument 0
pop pointer 0
push argument 1
push this 1
call MyMath.mod 2
push this 2
push argument 1
push this 1
call Math.divide 2
push constant 1
sub
add
push this 2
call MyMath.mod 2
push this 1
call Math.multiply 2
add
return
function Grid.down 0
push argument 0
pop pointer 0
push argument 1
push this 1
call MyMath.mod 2
push this 2
push argument 1
push this 1
call Math.divide 2
push constant 1
add
add
push this 2
call MyMath.mod 2
push this 1
call Math.multiply 2
add
return
function Grid.neighbors 1
push argument 0
pop pointer 0
push constant 8
call Array.new 1
pop local 0
push constant 0
push local 0
add
push pointer 0
push pointer 0
push argument 1
call Grid.up 2
call Grid.left 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 1
push local 0
add
push pointer 0
push argument 1
call Grid.up 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 2
push local 0
add
push pointer 0
push pointer 0
push argument 1
call Grid.up 2
call Grid.right 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 3
push local 0
add
push pointer 0
push argument 1
call Grid.right 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 4
push local 0
add
push pointer 0
push pointer 0
push argument 1
call Grid.down 2
call Grid.right 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 5
push local 0
add
push pointer 0
push argument 1
call Grid.down 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 6
push local 0
add
push pointer 0
push pointer 0
push argument 1
call Grid.down 2
call Grid.left 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 7
push local 0
add
push pointer 0
push argument 1
call Grid.left 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
return
function Grid.setNeighbors 2
push argument 0
pop pointer 0
push pointer 0
push argument 1
call Grid.neighbors 2
pop local 1
label WHILE_EXP0
push local 0
push constant 8
lt
not
if-goto WHILE_END0
push local 0
push local 1
add
pop pointer 1
push that 0
push this 4
add
push constant 0
not
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push local 1
call Array.dispose 1
pop temp 0
push constant 0
return
function Grid.incNeighbors 2
push argument 0
pop pointer 0
push pointer 0
push argument 1
call Grid.neighbors 2
pop local 1
label WHILE_EXP0
push local 0
push constant 8
lt
not
if-goto WHILE_END0
push local 0
push local 1
add
pop pointer 1
push that 0
push argument 2
add
push local 0
push local 1
add
pop pointer 1
push that 0
push argument 2
add
pop pointer 1
push that 0
push constant 1
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push local 1
call Array.dispose 1
pop temp 0
push constant 0
return
function Grid.liveNeighbors 3
push argument 0
pop pointer 0
push constant 0
pop local 1
push constant 0
pop local 0
push pointer 0
push argument 1
call Grid.neighbors 2
pop local 2
label WHILE_EXP0
push local 0
push constant 8
lt
not
if-goto WHILE_END0
push local 0
push local 2
add
pop pointer 1
push that 0
push this 4
add
pop pointer 1
push that 0
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 1
push constant 1
add
pop local 1
label IF_FALSE0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push local 2
call Array.dispose 1
pop temp 0
push local 1
return
function Grid.nextGen 3
push argument 0
pop pointer 0
push constant 0
pop local 1
push this 3
call Array.new 1
pop local 0
label WHILE_EXP0
push local 1
push this 3
lt
not
if-goto WHILE_END0
push local 1
push local 0
add
push pointer 0
push local 1
call Grid.cellLives 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP0
label WHILE_END0
push constant 0
pop local 1
push local 0
return
function Grid.nextGen2 3
push argument 0
pop pointer 0
push pointer 0
call Grid.liveNeighborCounts 1
pop local 1
push constant 0
pop local 2
push this 3
call Array.new 1
pop local 0
label WHILE_EXP0
push local 2
push this 3
lt
not
if-goto WHILE_END0
push local 2
push local 0
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 2
push local 1
add
pop pointer 1
push that 0
push constant 3
eq
push local 2
push local 1
add
pop pointer 1
push that 0
push constant 2
eq
push local 2
push this 4
add
pop pointer 1
push that 0
and
or
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 2
push local 0
add
push constant 0
not
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF_FALSE0
push local 2
push constant 1
add
pop local 2
goto WHILE_EXP0
label WHILE_END0
push local 1
call Array.dispose 1
pop temp 0
push local 0
return
function Grid.cellLives 2
push argument 0
pop pointer 0
push pointer 0
push argument 1
call Grid.liveNeighbors 2
pop local 0
push constant 0
pop local 1
push argument 1
push this 4
add
pop pointer 1
push that 0
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 0
push constant 2
eq
push local 0
push constant 3
eq
or
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 0
not
pop local 1
label IF_FALSE1
goto IF_END0
label IF_FALSE0
push local 0
push constant 3
eq
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 0
not
pop local 1
label IF_FALSE2
label IF_END0
push local 1
return
function Grid.liveNeighborCounts 2
push argument 0
pop pointer 0
push this 3
call Array.new 1
pop local 1
push local 1
push this 3
call MyLib.zeroArray 2
pop temp 0
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push this 3
lt
not
if-goto WHILE_END0
push local 0
push this 4
add
pop pointer 1
push that 0
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push pointer 0
push local 0
push local 1
call Grid.incNeighbors 3
pop temp 0
label IF_FALSE0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push local 1
return
function Grid.step 2
push argument 0
pop pointer 0
push constant 0
pop local 1
push pointer 0
call Grid.nextGen2 1
pop local 0
label WHILE_EXP0
push local 1
push this 3
lt
not
if-goto WHILE_END0
push local 1
push this 4
add
push local 1
push local 0
add
pop pointer 1
push that 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP0
label WHILE_END0
push local 0
call Array.dispose 1
pop temp 0
push constant 0
return
function Grid.dispose 0
push argument 0
pop pointer 0
push this 4
call Memory.deAlloc 1
pop temp 0
push pointer 0
call Memory.deAlloc 1
pop temp 0
push constant 0
return
