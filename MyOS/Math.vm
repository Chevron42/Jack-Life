function Math.init 0
push constant 16
call Array.new 1
pop static 0
push constant 0
push static 0
add
push constant 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 1
push static 0
add
push constant 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 2
push static 0
add
push constant 4
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 3
push static 0
add
push constant 8
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 4
push static 0
add
push constant 16
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 5
push static 0
add
push constant 32
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 6
push static 0
add
push constant 64
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 7
push static 0
add
push constant 128
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 8
push static 0
add
push constant 256
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 9
push static 0
add
push constant 512
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 10
push static 0
add
push constant 1024
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 11
push static 0
add
push constant 2048
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 12
push static 0
add
push constant 4096
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 13
push static 0
add
push constant 8192
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 14
push static 0
add
push constant 16384
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 15
push static 0
add
push constant 32767
neg
push constant 1
sub
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
function Math.abs 0
push argument 0
push constant 0
lt
if-goto IF_TRUE_0
goto IF_FALSE_0
label IF_TRUE_0
push argument 0
neg
return
goto ELSE_SKIP_0
label IF_FALSE_0
push argument 0
return
label ELSE_SKIP_0
function Math.bits 0
push argument 0
pop pointer 0
push static 0
return
function Math.multiply 4
push constant 0
pop local 1
push constant 0
pop local 0
push constant 1
pop local 2
push argument 0
pop local 3
label WHILE_TOP_0
push local 0
push constant 15
lt
not
if-goto WHILE_BREAK_0
push argument 1
push local 2
and
if-goto IF_TRUE_1
goto IF_FALSE_1
label IF_TRUE_1
push local 1
push local 3
add
pop local 1
label IF_FALSE_1
push local 2
push local 2
add
pop local 2
push local 3
push local 3
add
pop local 3
push local 0
push constant 1
add
pop local 0
goto WHILE_TOP_0
label WHILE_BREAK_0
push local 1
return
function Math.divide 1
push argument 0
call Math.abs 1
push argument 1
call Math.abs 1
call Math.div_ 2
pop local 0
push argument 0
push constant 0
gt
push argument 1
push constant 0
gt
eq
if-goto IF_TRUE_2
goto IF_FALSE_2
label IF_TRUE_2
push local 0
return
goto ELSE_SKIP_1
label IF_FALSE_2
push local 0
neg
return
label ELSE_SKIP_1
function Math.div_ 1
push argument 1
push constant 0
eq
if-goto IF_TRUE_3
goto IF_FALSE_3
label IF_TRUE_3
push constant 0
call Sys.error 1
pop temp 0
label IF_FALSE_3
push argument 1
push argument 0
gt
if-goto IF_TRUE_4
goto IF_FALSE_4
label IF_TRUE_4
push constant 0
return
label IF_FALSE_4
push argument 0
push constant 2
push argument 1
call Math.multiply 2
call Math.div_ 2
pop local 0
push argument 0
push constant 2
push local 0
call Math.multiply 2
push argument 1
call Math.multiply 2
sub
push argument 1
lt
if-goto IF_TRUE_5
goto IF_FALSE_5
label IF_TRUE_5
push constant 2
push local 0
call Math.multiply 2
return
label IF_FALSE_5
push constant 2
push local 0
call Math.multiply 2
push constant 1
add
return
function Math.sqrt 2
push constant 7
pop local 1
push constant 0
pop local 0
label WHILE_TOP_1
push local 1
push constant 1
neg
gt
not
if-goto WHILE_BREAK_1
push local 0
push local 1
push static 0
add
pop pointer 1
push that 0
add
push local 0
push local 1
push static 0
add
pop pointer 1
push that 0
add
call Math.multiply 2
push argument 0
gt
not
push local 0
push local 1
push static 0
add
pop pointer 1
push that 0
add
push constant 182
lt
and
if-goto IF_TRUE_6
goto IF_FALSE_6
label IF_TRUE_6
push local 0
push local 1
push static 0
add
pop pointer 1
push that 0
add
pop local 0
label IF_FALSE_6
push local 1
push constant 1
sub
pop local 1
goto WHILE_TOP_1
label WHILE_BREAK_1
push local 0
return
function Math.max 0
push argument 1
push argument 0
gt
if-goto IF_TRUE_7
goto IF_FALSE_7
label IF_TRUE_7
push argument 1
return
goto ELSE_SKIP_2
label IF_FALSE_7
push argument 0
return
label ELSE_SKIP_2
function Math.min 0
push argument 1
push argument 0
lt
if-goto IF_TRUE_8
goto IF_FALSE_8
label IF_TRUE_8
push argument 1
return
goto ELSE_SKIP_3
label IF_FALSE_8
push argument 0
return
label ELSE_SKIP_3
function Math.pow 2
push argument 1
push constant 0
eq
if-goto IF_TRUE_9
goto IF_FALSE_9
label IF_TRUE_9
push constant 1
return
label IF_FALSE_9
push argument 1
push constant 1
eq
if-goto IF_TRUE_10
goto IF_FALSE_10
label IF_TRUE_10
push argument 0
return
label IF_FALSE_10
push argument 1
push constant 2
call Math.divide 2
pop local 0
push argument 0
push local 0
call Math.pow 2
push argument 0
push local 0
call Math.pow 2
call Math.multiply 2
pop local 1
push local 0
push local 0
add
push argument 1
eq
if-goto IF_TRUE_11
goto IF_FALSE_11
label IF_TRUE_11
push local 1
return
label IF_FALSE_11
push local 1
push argument 0
call Math.multiply 2
return
function Math.mod 0
push argument 0
push argument 1
push argument 0
push argument 1
call Math.divide 2
call Math.multiply 2
sub
return
