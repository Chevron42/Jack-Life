// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array s;
    field int len;
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength < 1) {
            let maxLength = 1;
        }
        let s = Memory.alloc(maxLength);
        let len = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(s);
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return len;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return s[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let s[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let s[len] = c;
        let len = len + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (len = 0) {
            return;
        }
        let len = len - 1;
        let s[len] = 0;
        return;
    }

    method String clear() {
        while (~(len = 0)) { 
            do eraseLastChar();
        }
        return this;
    }
    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var boolean neg;
        //"0" = charCode 48
        
        var int i, ret;

        let i = 0;
        let ret = 0;
        if (s[0] = 45) {
            let i = i + 1;
            let neg = true;
        }
        // loop while we havent reached end of string and char is an integer
        while ((i < len) & (s[i] > 47) & (s[i] < 58)) {
            let ret = (ret * 10) + (s[i] - 48);
            let i = i + 1;
        }
        if (neg) {
            return -ret;
        }
        else {
            return ret;
        }
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        //"0" = charCode 48
        var int v, c;
        var String intString;
        let v = Math.abs(val);
        let c  = (v - (10 * (v / 10))) + 48; //set c to charcode of last digit

        if (v < 10) {
            //if value is one digit, clear this string and set its one character to be c
            do clear();
            if (val < 0) {
                do appendChar(45);
            }
            do appendChar(c);
        }
        
        else {
            //if there is more to go, recurse
            //setInt eventually grounds out in appending the leftmost digit to this string, blank. then the saved c will get appended as you come bakc up
            do setInt(val/10);
            do appendChar(c);
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backSpace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
